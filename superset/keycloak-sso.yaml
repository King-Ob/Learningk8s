apiVersion: v1
kind: Namespace
metadata:
  name: keycloak-sso

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: superset-config
  namespace: keycloak-sso
data:
  superset_config.py: |
    from flask_appbuilder.security.manager import AUTH_OID, AUTH_REMOTE_USER, AUTH_DB, AUTH_LDAP, AUTH_OAUTH

    # The SQLAlchemy connection string.
    SQLALCHEMY_DATABASE_URI = 'postgresql+psycopg2://superset:superset@postgresql:5432/superset'

    # Flask-WTF flag for CSRF
    WTF_CSRF_ENABLED = True

    # Add endpoints requiring authentication here, for example:
    # AUTH_ROLE_PUBLIC = 'Public'
    # AUTH_ROLE_AUTHENTICATED = 'Authenticated'
    # AUTH_ROLE_ADMIN = 'Admin'
    # AUTH_USER_REGISTRATION = True
    # AUTH_USER_REGISTRATION_ROLE = AUTH_ROLE_PUBLIC
    # AUTH_OID_PROVIDERS = [{'name':'my google account', 'url':'https://accounts.google.com', 'client_id': GOOGLE_CLIENT_ID, 'client_secret': GOOGLE_CLIENT_SECRET, 'whitelisted_domains': ['example.com'], 'icon': 'fa-google'}]
    # AUTH_REMOTE_USER_KEY = 'REMOTE_USER'
    # AUTH_REMOTE_USER_HEADER = 'HTTP_REMOTE_USER'
    # AUTH_DEFAULT_PROVIDERS = AUTH_DB
    # AUTH_USER_REGISTRATION_ROLE = AUTH_ROLE_PUBLIC

    # Configure SSO with Keycloak
    AUTH_TYPE = AUTH_OAUTH
    AUTH_OAUTH_PROVIDERS = [{
        'name': 'Keycloak',
        'icon': 'fa-key',
        'token_key': 'access_token',
        'remote_app': {
            'client_id': '<client_id>',
            'client_secret': '<client_secret>',
            'api_base_url': 'https://<keycloak_url>/auth/realms/<realm_name>',
            'access_token_url': 'https://<keycloak_url>/auth/realms/<realm_name>/protocol/openid-connect/token',
            'authorize_url': 'https://<keycloak_url>/auth/realms/<realm_name>/protocol/openid-connect/auth',
            'client_kwargs': {
                'scope': 'openid email profile'
            }
        }
    }]

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset
  namespace: keycloak-sso
  labels:
    app: superset
spec:
  replicas: 1
  selector:
    matchLabels:
      app: superset
  template:
    metadata:
      labels:
        app: superset
    spec:
      containers:
        - name: superset
          image: amancevice/superset:latest
          env:
            - name: FLASK_APP
              value: superset
            - name: FLASK_ENV
              value: production
            - name: SUPERSET_CONFIG
              value: /etc/superset/superset_config.py
          volumeMounts:
            - name: superset-config
              mountPath: /etc/superset
              readOnly: true
            - name: postgresql
              mountPath: /var/lib/postgresql/data
              subPath: postgresql-data
              readOnly: false
          ports:
            - containerPort: 8088
              name: superset
      volumes:
        - name: superset-config
          configMap:
            name: superset-config
        - name: postgresql

